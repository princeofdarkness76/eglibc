libdfp {
  GLIBC_2.5 {
    # functions potentially used in other libraries
    fe_dec_getround;
    fe_dec_setround;
    fmt_d32;
    fmt_d64;
    fmt_d128;
    decoded32;
    decoded64;
    decoded128;
    quantized32;
    quantized64;
    quantized128;
    copysignd32;
    copysignd64;
    copysignd128;
    modfd32;
    modfd64;
    modfd128;
    frexpd32;
    frexpd64;
    frexpd128;
    roundd32;
    roundd64;
    roundd128;
    lroundd32;
    lroundd64;
    lroundd128;
    llroundd32;
    llroundd64;
    llroundd128;
    rintd32;
    rintd64;
    rintd128;
    lrintd32;
    lrintd64;
    lrintd128;
    llrintd32;
    llrintd64;
    llrintd128;
    truncd32;
    truncd64;
    truncd128;
# unnecessary externally re math.h though we maintain internal version for use
# by fpclassifyd32/64/128.
#    isnormald32;
#    isnormald64;
#    isnormald128;
    isgreaterd32;
    isgreaterd64;
    isgreaterd128;
    isgreaterequald32;
    isgreaterequald64;
    isgreaterequald128;
    islessd32;
    islessd64;
    islessd128;
    islessequald32;
    islessequald64;
    islessequald128;
    islessgreaterd32;
    islessgreaterd64;
    islessgreaterd128;
    isunorderedd32;
    isunorderedd64;
    isunorderedd128;
    fabsd32;
    fabsd64;
    fabsd128;
    ceild32;
    ceild64;
    ceild128;
    floord32;
    floord64;
    floord128;
    fdimd32;
    fdimd64;
    fdimd128;
    fmaxd32;
    fmaxd64;
    fmaxd128;
    fmind32;
    fmind64;
    fmind128;
    powd32;
    powd64;
    powd128;
    sqrtd32;
    sqrtd64;
    sqrtd128;
    cbrtd32;
    cbrtd64;
    cbrtd128;
    logd32;
    logd64;
    logd128;
    log10d32;
    log10d64;
    log10d128;
    expd32;
    expd64;
    expd128;
    asind32;
    asind64;
    asind128;
    acosd32;
    acosd64;
    acosd128;
    atand32;
    atand64;
    atand128;
    sind32;
    sind64;
    sind128;
    cosd32;
    cosd64;
    cosd128;
    tand32;
    tand64;
    tand128;
    atan2d32;
    atan2d64;
    atan2d128;
    sinhd32;
    sinhd64;
    sinhd128;
    coshd32;
    coshd64;
    coshd128;
    tanhd32;
    tanhd64;
    tanhd128;
    nearbyintd32;
    nearbyintd64;
    nearbyintd128;
    nextafterd32;
    nextafterd64;
    nextafterd128;
    nexttowardd32;
    nexttowardd64;
    nexttowardd128;
    logbd32;
    logbd64;
    logbd128;
    ilogbd32;
    ilogbd64;
    ilogbd128;
    scalbnd32;
    scalbnd64;
    scalbnd128;
    scalblnd32;
    scalblnd64;
    scalblnd128;
    ldexpd32;
    ldexpd64;
    ldexpd128;
    samequantumd32;
    samequantumd64;
    samequantumd128;
    acoshd32;
    acoshd64;
    acoshd128;
    asinhd32;
    asinhd64;
    asinhd128;
    atanhd32;
    atanhd64;
    atanhd128;
    erfd32;
    erfd64;
    erfd128;
    erfcd32;
    erfcd64;
    erfcd128;
    tgammad32;
    tgammad64;
    tgammad128;
    lgammad32;
    lgammad64;
    lgammad128;
    remainderd32;
    remainderd64;
    remainderd128;
    log2d32;
    log2d64;
    log2d128;
    log1pd32;
    log1pd64;
    log1pd128;
    exp2d32;
    exp2d64;
    exp2d128;
    expm1d32;
    expm1d64;
    expm1d128;
    hypotd32;
    hypotd64;
    hypotd128;
    fmodd32;
    fmodd64;
    fmodd128;
    fmad32;
    fmad64;
    fmad128;
    # The classification macros expand into these internal forms, thus
    # internal function exposure is necessary.
    __fpclassifyd32;
    __fpclassifyd64;
    __fpclassifyd128;
    __signbitd32;
    __signbitd64;
    __signbitd128;
    __finited32;
    __finited64;
    __finited128;
    __isinfd32;
    __isinfd64;
    __isinfd128;
    __isnand32;
    __isnand64;
    __isnand128;
  };
}
libc {
  GLIBC_2.5 {
    __decrm_location;
    strtod32;
    strtod64;
    strtod128;
    wcstod32;
    wcstod64;
    wcstod128;
  };
}
libdecnumber {
  GLIBC_2.5 {
#    ___decNumberFromString;
#    ___decNumberToString;
#    ___decNumberToEngString;
#    ___decNumberAbs;
#    ___decNumberAdd;
#    ___decNumberCompare;
#    ___decNumberCompareTotal;
#    ___decNumberDivide;
#    ___decNumberDivideInteger;
#    ___decNumberExp;
#    ___decNumberFromInt32;
#    ___decNumberFromUInt32;
#    ___decNumberLn;
#    ___decNumberLog10;
#    ___decNumberMax;
#    ___decNumberMin;
#    ___decNumberMinus;
#    ___decNumberMultiply;
#    ___decNumberNormalize;
#    ___decNumberPlus;
#    ___decNumberPower;
#    ___decNumberQuantize;
#    ___decNumberRemainder;
#    ___decNumberRemainderNear;
#    ___decNumberRescale;
#    ___decNumberSameQuantum;
#    ___decNumberScaleB;
#    ___decNumberSquareRoot;
#    ___decNumberSubtract;
#    ___decNumberToIntegralValue;
#    ___decNumberCopy;
#    ___decNumberTrim;
#    ___decNumberVersion;
#    ___decNumberZero;
#    ___decContextDefault;
#    ___decContextSetStatus;
#    ___decContextStatusToString;
#    ___decContextSetStatusFromString;
#    ___decNumberLog10;
#    ___decNumberLn;
#    ___decNumberExp;

#    ___decNumberSquareRoot;
#    ___decNumberMin;
#    ___decNumberMax;

# From decContext.c
    ___decContextClearStatus;
    ___decContextDefault;
    ___decContextGetRounding;
    ___decContextGetStatus;
    ___decContextRestoreStatus;
    ___decContextSaveStatus;
    ___decContextSetRounding;
    ___decContextSetStatus;
    ___decContextSetStatusFromString;
    ___decContextSetStatusFromStringQuiet;
    ___decContextSetStatusQuiet;
    ___decContextStatusToString;
    ___decContextTestSavedStatus;
    ___decContextTestStatus;
    ___decContextZeroStatus;

# From decNumber.c
    ___decNumberAbs;
    ___decNumberAdd;
    ___decNumberAnd;
    ___decNumberClass;
    ___decNumberClassToString;
    ___decNumberCompare;
    ___decNumberCompareSignal;
    ___decNumberCompareTotal;
    ___decNumberCompareTotalMag;
    ___decNumberCopy;
    ___decNumberCopyAbs;
    ___decNumberCopyNegate;
    ___decNumberCopySign;
    ___decNumberDivide;
    ___decNumberDivideInteger;
    ___decNumberExp;
    ___decNumberFMA;
    ___decNumberFromInt32;
    ___decNumberFromString;
    ___decNumberFromUInt32;
    ___decNumberGetBCD;
    ___decNumberInvert;
    ___decNumberIsNormal;
    ___decNumberIsSubnormal;
    ___decNumberLn;
    ___decNumberLog10;
    ___decNumberLogB;
    ___decNumberMax;
    ___decNumberMaxMag;
    ___decNumberMin;
    ___decNumberMinMag;
    ___decNumberMinus;
    ___decNumberMultiply;
    ___decNumberNextMinus;
    ___decNumberNextPlus;
    ___decNumberNextToward;
    ___decNumberNormalize;
    ___decNumberOr;
    ___decNumberPlus;
    ___decNumberPower;
    ___decNumberQuantize;
    ___decNumberReduce;
    ___decNumberRemainder;
    ___decNumberRemainderNear;
    ___decNumberRescale;
    ___decNumberRotate;
    ___decNumberSameQuantum;
    ___decNumberScaleB;
    ___decNumberSetBCD;
    ___decNumberShift;
    ___decNumberSquareRoot;
    ___decNumberSubtract;
    ___decNumberToEngString;
    ___decNumberToInt32;
    ___decNumberToIntegralExact;
    ___decNumberToIntegralValue;
    ___decNumberToString;
    ___decNumberToUInt32;
    ___decNumberTrim;
    ___decNumberVersion;
    ___decNumberXor;
    ___decNumberZero;

# From decNumberMath.c
    ___decNumberPow;
    ___decNumberSinh;
    ___decNumberCosh;
    ___decNumberTanh;
    ___decNumberSin;
    ___decNumberCos;
    ___decNumberTan;
    ___decNumberAtan;

# From dpd/decimal*.c
    ___decimal128FromString;
    ___decimal128ToString;
    ___decimal128ToEngString;
    ___decimal128FromNumber;
    ___decimal128ToNumber;
    ___decimal64FromString;
    ___decimal64ToString;
    ___decimal64ToEngString;
    ___decimal64FromNumber;
    ___decimal64ToNumber;
    ___decimal32FromString;
    ___decimal32ToString;
    ___decimal32ToEngString;
    ___decimal32FromNumber;
    ___decimal32ToNumber;
  };
}
