/* Decimal Floating Point convert 64-bit to int.
   POWER6 PowerPC32 version.
   Copyright (C) 2006 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 51 Franklin St - Fifth Floor, Boston,
   MA 02110-1301 USA  */

#include <sysdep.h>
#include <math_ldbl_opt.h>

	.machine	"power6"
/* int __fixddsi (__decimal64 x)  */
ENTRY (__fixddsi)
	stwu	r1,-16(r1)
	cfi_adjust_cfa_offset (16)
	drintn.	0,fp1,fp1,1	/* Preround to toward zero.  */
	dctfix	fp0,fp1 /* Convert x to integer.  */
	stfd	fp0,8(r1)
	ori	r1,r1,0		/* Special group ending nop.  */
	lwz	r0,8(r1)
	lwz	r3,12(r1)
/* The return is an int, but we have long long, so we need to force overflow
   if there are any significant bits in the high word or overflow (incorrect
   sign) from the low word.  */
	cmpwi	cr0,r0,0
	cmpwi	cr6,r3,0
	cmpwi	cr7,r0,-1
	blt	cr0,L(negative)
	bne	cr0,L(posoverflow)
	bge	cr6,L(done)
L(posoverflow):
	lis	r3,0x7fff	/* return max positive int.  */
	ori	r3,r3,0xffff
	b	L(done)
L(negative):
	bne	cr7,L(negoverflow)
	blt	cr6,L(done)
L(negoverflow):
	lis	r3,0x8000	/* return max negative int.  */
L(done):
	addi	r1,r1,16
	blr
	END (__fixddsi)
