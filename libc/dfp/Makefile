subdir		:= dfp

headers		:= bits/dfpfenv.h bits/dfpcalls.h

# Build the -ldfp and -libdecnumber libraries.

extra-libs := libdfp
#extra-libs := libdfp libdecnumber
extra-libs-others := $(extra-libs)
# install-lib-ldscripts := libdfp.so

# The libdecnumber code is in the libdecnumber/ directory.
vpath %.c libdecnumber:libdecnumber/dpd
vpath %.h libdecnumber:libdecnumber/dpd


# Some symbols need to be in libdfp.so as well as libc.
libdfp-shared = dfptypeconv decode-decimal \
	dpd-private
# \
#	decNumber decimal32 decimal64 decimal128 decContext

# The libdecnumber printing functions need to be in libc.so as well as
# libdecnumber.
#libdecnumber-shared = decNumber decimal32 decimal64 decimal128 decContext


#sysd-rules-patterns += libc_%:%

include ../Makeconfig

# libDecNumber contains some functionality which isn't needed in libc.
#libdecnumber-routines := $(libdecnumber-shared) decNumberMath

# These get added to libdfp.  Anything in $(libdfp-shared) gets
# added to libc.so as well because they're the printf helpers.
libdfp-routines := $(libdfp-shared) \
	decNumber decimal32 decimal64 decimal128 decContext \
	roundd32 roundd64 roundd128 \
	lroundd32 lroundd64 lroundd128 \
	llroundd32 llroundd64 llroundd128 \
	rintd32 rintd64 rintd128 \
	lrintd32 lrintd64 lrintd128 \
	llrintd32 llrintd64 llrintd128 \
	truncd32 truncd64 truncd128 \
	quantized32 quantized64 quantized128 \
	signbitd32 signbitd64 signbitd128 \
	copysignd32 copysignd64 copysignd128 \
	modfd32 modfd64 modfd128 \
	frexpd32 frexpd64 frexpd128 \
	fpclassifyd32 fpclassifyd64 fpclassifyd128 \
	isnormald32 isnormald64 isnormald128 \
	isgreaterd32 isgreaterd64 isgreaterd128 \
	isgreaterequald32 isgreaterequald64 isgreaterequald128 \
	islessd32 islessd64 islessd128 \
	islessequald32 islessequald64 islessequald128 \
	islessgreaterd32 islessgreaterd64 islessgreaterd128 \
	finited32 finited64 finited128 \
	isinfd32 isinfd64 isinfd128 \
	nand32 nand64 nand128 \
	isnand32 isnand64 isnand128 \
	isunorderedd32 isunorderedd64 isunorderedd128 \
	fabsd32 fabsd64 fabsd128 \
	ceild32 ceild64 ceild128 \
	floord32 floord64 floord128 \
	fmaxd32 fmaxd64 fmaxd128 \
	fmind32 fmind64 fmind128 \
	fdimd32 fdimd64 fdimd128 \
	powd32 powd64 powd128 \
	expd32 expd64 expd128 \
	log10d32 log10d64 log10d128 \
	logd32 logd64 logd128 \
	sqrtd32 sqrtd64 sqrtd128 \
	cbrtd32 cbrtd64 cbrtd128 \
	atand32 atand64 atand128 \
	atan2d32 atan2d64 atan2d128 \
	acosd32 acosd64 acosd128 \
	asind32 asind64 asind128 \
	sind32 sind64 sind128 \
	cosd32 cosd64 cosd128 \
	tand32 tand64 tand128 \
	sinhd32 sinhd64 sinhd128 \
	coshd32 coshd64 coshd128 \
	tanhd32 tanhd64 tanhd128 \
	atanhd32 atanhd64 atanhd128 \
	nearbyintd32 nearbyintd64 nearbyintd128 \
	nextafterd32 nextafterd64 nextafterd128 \
	nexttowardd32 nexttowardd64 nexttowardd128 \
	logbd32 logbd64 logbd128 \
	ilogbd32 ilogbd64 ilogbd128 \
	scalbnd32 scalbnd64 scalbnd128 \
	scalblnd32 scalblnd64 scalblnd128 \
	ldexpd32 ldexpd64 ldexpd128 \
	samequantumd32 samequantumd64 samequantumd128 \
	acoshd32 acoshd64 acoshd128 \
	asinhd32 asinhd64 asinhd128 \
	erfd32 erfd64 erfd128 \
	tgammad32 tgammad64 tgammad128 \
	lgammad32 lgammad64 lgammad128 \
	remainderd32 remainderd64 remainderd128 \
	expm1d32 expm1d64 expm1d128 \
	exp2d32 exp2d64 exp2d128 \
	log1pd32 log1pd64 log1pd128 \
	log2d32 log2d64 log2d128 \
	fmodd32 fmodd64 fmodd128 \
	hypotd32 hypotd64 hypotd128 \
	fmad32 fmad64 fmad128 \
	mapround fe_decround \
	decNumberMath

# Some of these functions are picked up out of the dfp/sysdeps/dfp directory
# due to the sysdeps/unix/sysv/linux/Implies sydeps/dfp/Subdirs chain.
routines = $(libdfp-shared:%=libc_%) \
	decroundtls strtod32 strtod64 strtod128 \
	wcstod32 wcstod64 wcstod128 printf_dfp printf_dfphex

# Will only apply to those C files being built into libdfp
ifeq ($(subdir), dfp)
sysdep-CFLAGS += -D__STDC_WANT_DEC_FP__=1 \
	-I../dfp/libdecnumber -I../dfp/libdecnumber/dpd
CFLAGS-printf_dfp.c += -O1 -fno-tree-ter
endif

ifneq ($(subdir), dfp)
CFLAGS-decroundtls.c = -D__STDC_WANT_DEC_FP__=1
CFLAGS-strtod32.c = -D__STDC_WANT_DEC_FP__=1
CFLAGS-wcstod32.c ?= -D__STDC_WANT_DEC_FP__=1
CFLAGS-strtod64.c = -D__STDC_WANT_DEC_FP__=1
CFLAGS-wcstod64.c ?= -D__STDC_WANT_DEC_FP__=1
CFLAGS-strtod128.c = -D__STDC_WANT_DEC_FP__=1
CFLAGS-wcstod128.c ?= -D__STDC_WANT_DEC_FP__=1
CFLAGS-fe_decround.c = -D__STDC_WANT_DEC_FP__=1
endif

#install: $(inst_libdir)/libdfp.so

################BEGIN TEST SPECIFIC STUFF

ifneq (no,$(PERL))
libdfp-tests = test-d32 test-d64 test-d128
libdfp-tests.o = $(addsuffix .o,$(libdfp-tests))

# Directs the test framework to run these tests.
tests += $(libdfp-tests)

# libdfp-test.c is generated by the perl script and the .inc file
# These will get whacked during a make clean.
libdfp-tests-generated = libdfp-test-ulps.h libdfp-test.c

# Files created by the Makefile which will be removed with a make clean
generated += $(libdfp-tests-generated) libdfp-test.stmp

# This gets used for doing pre-make dependency checks and for allowing a
# Makefile to do something conditional based on something that can only be
# figured out from headers.  This is necessary in the test framework because
# these are generated files and if they're changed then the test framework
# needs to be re-run.
before-compile += $(objpfx)libdfp-test.c

# Pick the file out of the sysdeps directory?
#ulps-file = $(firstword $(wildcard $(sysdirs:%=%/libdfp-test-ulps)))

# The generated tests should be dependent on the stmp files and rebuilt when
# the stmp files change.
$(addprefix $(objpfx), $(libdfp-tests-generated)): $(objpfx)libdfp-test.stmp

# Generate the stamps files if the include file, ulps file, or perl script
# which generates the libdfp-test.c file have changed.
#$(objpfx)libdfp-test.stmp: $(ulps-file) libdfp-test.inc gen-libdfp-test.pl
$(objpfx)libdfp-test.stmp: libdfp-test-ulps libdfp-test.inc gen-libdfp-test.pl
	$(make-target-directory)
	$(PERL) gen-libdfp-test.pl -u $< -o "$(objpfx)"
	@echo > $@

# These .o files are generated from the libdfp-test.c file and must be rebuilt
# if the stamp files are updated.
$(objpfx)test-d32.o: $(objpfx)libdfp-test.stmp
$(objpfx)test-d64.o: $(objpfx)libdfp-test.stmp
$(objpfx)test-d128.o: $(objpfx)libdfp-test.stmp
endif

# Adding -D__STDC_WANT_DEC_FP__=1 is redundant due to earlier override.
CFLAGS-test-d32.c = -fno-inline -fno-builtin -std=gnu99
CFLAGS-test-d64.c = -fno-inline -fno-builtin -std=gnu99
CFLAGS-test-d128.c = -fno-inline -fno-builtin -std=gnu99

distribute += libdfp-test.inc gen-libdfp-test.pl

#############END TEST-SPECIFIC STUFF

# This needs to follow the 'tests' variable for that variable to be seen by
# make check.
include ../Rules

# In order to provide actual targets for the files added to routines from
# $(libdecnumber-shared) and $(libdfp-shared) we have to find the c files
# associated with them and rebuild them as .o files prefaced with libc_ so
# that they're not built with NOT_IN_libc.  This is so that the hidden_proto
# checks work properly.  This doesn't create a new .c file.  It simply builds
# again and creates libc_<libdecnumber-shared>.o and libc_<libdfp-shared>.o
# files.
define o-iterator-doit
$(objpfx)libc_%$o: %.c $(before-compile); $$(compile-command.c)
endef
object-suffixes-left := $(all-object-suffixes)
include $(o-iterator)


# Required to get libdfp linked against the test cases.
ifeq ($(build-shared),yes)
$(addprefix $(objpfx),$(tests)): $(objpfx)libdfp.so$(libdfp.so-version)
endif

# libc is required for libdfp in order to query the rounding mode when
# invoking dfp functions because we need the TLS functions.
# We current link libm.so because we need _LIB_VERSION.
$(objpfx)libdfp.so: $(common-objpfx)libc.so $(common-objpfx)libc_nonshared.a $(common-objpfx)math/libm.so
